[
  {
    "objectID": "Homework4.html",
    "href": "Homework4.html",
    "title": "Homework4",
    "section": "",
    "text": "If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\n\n\n“../MyData.csv”\n\n\nWhat are the major benefits of using R projects?\n\n\nR projects allow us to read raw data in or connect to a database; manipulate data as needed; subset data sets; summarize data to create meaningful insights; model data to make inference or predict outcomes; and communicate our results via dashboards, documents, model files, etc.\n\n\nWhat is git and what is github?\n\n\ngit is a version control software to help track the changes we commit to files and allow multiple users to work on the same project. github is a hosting service that allows us to do git-based projects on the internet and share them widely!\n\n\nWhat are the two main differences between a tibble and a data.frame?\n\n\nOne difference is that the default print() method for a tibble provides information on the number of observations, columns, and shows only the first few rows/columns. Another difference is that tibbles do not coerce down to a vector when subsetted with [, though they do when using $.\n\n\nRewrite the following nested function call using BaseR’s chaining operator:\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n#nested\nnested &lt;- arrange(filter(select(as_tibble(iris), starts_with(\"Petal\"), Species),\nPetal.Length &lt; 1.55), Species)\n\n#Print tibble\nnested\n\n# A tibble: 37 × 3\n   Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          1.4         0.2 setosa \n 2          1.4         0.2 setosa \n 3          1.3         0.2 setosa \n 4          1.5         0.2 setosa \n 5          1.4         0.2 setosa \n 6          1.4         0.3 setosa \n 7          1.5         0.2 setosa \n 8          1.4         0.2 setosa \n 9          1.5         0.1 setosa \n10          1.5         0.2 setosa \n# ℹ 27 more rows\n\n#chained\n#filter first since, in theory (see notes) you might not subset with that variable\n#same with arrange, though more likely to keep variable\nchained &lt;- as_tibble(iris) |&gt; filter(Petal.Length &lt; 1.55) |&gt; arrange(Species) |&gt; select(starts_with(\"Petal\"), Species)\n\n#Print tibble\nchained\n\n# A tibble: 37 × 3\n   Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          1.4         0.2 setosa \n 2          1.4         0.2 setosa \n 3          1.3         0.2 setosa \n 4          1.5         0.2 setosa \n 5          1.4         0.2 setosa \n 6          1.4         0.3 setosa \n 7          1.5         0.2 setosa \n 8          1.4         0.2 setosa \n 9          1.5         0.1 setosa \n10          1.5         0.2 setosa \n# ℹ 27 more rows\n\n#Check to confirm that the tibbles are equal\nisTRUE(all.equal(nested,chained))\n\n[1] TRUE"
  },
  {
    "objectID": "Homework4.html#task-1-conceptual-questions",
    "href": "Homework4.html#task-1-conceptual-questions",
    "title": "Homework4",
    "section": "",
    "text": "If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\n\n\n“../MyData.csv”\n\n\nWhat are the major benefits of using R projects?\n\n\nR projects allow us to read raw data in or connect to a database; manipulate data as needed; subset data sets; summarize data to create meaningful insights; model data to make inference or predict outcomes; and communicate our results via dashboards, documents, model files, etc.\n\n\nWhat is git and what is github?\n\n\ngit is a version control software to help track the changes we commit to files and allow multiple users to work on the same project. github is a hosting service that allows us to do git-based projects on the internet and share them widely!\n\n\nWhat are the two main differences between a tibble and a data.frame?\n\n\nOne difference is that the default print() method for a tibble provides information on the number of observations, columns, and shows only the first few rows/columns. Another difference is that tibbles do not coerce down to a vector when subsetted with [, though they do when using $.\n\n\nRewrite the following nested function call using BaseR’s chaining operator:\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n#nested\nnested &lt;- arrange(filter(select(as_tibble(iris), starts_with(\"Petal\"), Species),\nPetal.Length &lt; 1.55), Species)\n\n#Print tibble\nnested\n\n# A tibble: 37 × 3\n   Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          1.4         0.2 setosa \n 2          1.4         0.2 setosa \n 3          1.3         0.2 setosa \n 4          1.5         0.2 setosa \n 5          1.4         0.2 setosa \n 6          1.4         0.3 setosa \n 7          1.5         0.2 setosa \n 8          1.4         0.2 setosa \n 9          1.5         0.1 setosa \n10          1.5         0.2 setosa \n# ℹ 27 more rows\n\n#chained\n#filter first since, in theory (see notes) you might not subset with that variable\n#same with arrange, though more likely to keep variable\nchained &lt;- as_tibble(iris) |&gt; filter(Petal.Length &lt; 1.55) |&gt; arrange(Species) |&gt; select(starts_with(\"Petal\"), Species)\n\n#Print tibble\nchained\n\n# A tibble: 37 × 3\n   Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          1.4         0.2 setosa \n 2          1.4         0.2 setosa \n 3          1.3         0.2 setosa \n 4          1.5         0.2 setosa \n 5          1.4         0.2 setosa \n 6          1.4         0.3 setosa \n 7          1.5         0.2 setosa \n 8          1.4         0.2 setosa \n 9          1.5         0.1 setosa \n10          1.5         0.2 setosa \n# ℹ 27 more rows\n\n#Check to confirm that the tibbles are equal\nisTRUE(all.equal(nested,chained))\n\n[1] TRUE"
  },
  {
    "objectID": "Homework4.html#task-2-reading-delimited-data",
    "href": "Homework4.html#task-2-reading-delimited-data",
    "title": "Homework4",
    "section": "Task 2: Reading Delimited Data",
    "text": "Task 2: Reading Delimited Data\n\nGlass Data\nWe read this data directly into R from the specified URL, using read_csv since the delimiter is a comma. Then, we print the tibble to inspect.\n\nlibrary(readr)\nlibrary(vroom)\n\n\nAttaching package: 'vroom'\n\n\nThe following objects are masked from 'package:readr':\n\n    as.col_spec, col_character, col_date, col_datetime, col_double,\n    col_factor, col_guess, col_integer, col_logical, col_number,\n    col_skip, col_time, cols, cols_condense, cols_only, date_names,\n    date_names_lang, date_names_langs, default_locale, fwf_cols,\n    fwf_empty, fwf_positions, fwf_widths, locale, output_column,\n    problems, spec\n\n#Read this data into R directly from the specified URL, use read_csv since delim = ','\nglass_data &lt;- read_csv(\"https://www4.stat.ncsu.edu/~online/datasets/glass.data\",col_names=c(\"Id\",\"RI\",\"Na\",\"Mg\",\"Al\",\"Si\",\"K\",\"Ca\",\"Ba\",\"Fe\",\"Type_of_Glass\"),guess_max=min(1000,Inf)) #Had some trouble with using n_max = Inf, then using n_max in guess_max\n\nRows: 214 Columns: 11\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): Id, RI, Na, Mg, Al, Si, K, Ca, Ba, Fe, Type_of_Glass\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n#Print the tibble\nglass_data\n\n# A tibble: 214 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_Glass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;\n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0                1\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0                1\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0                1\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0                1\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0                1\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26             1\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0                1\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0                1\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0                1\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11             1\n# ℹ 204 more rows\n\n\nWe start a chain to overwrite the Type_of_glass variable using mutate(). Then, we continue our chain and keep only observations where the Fe variable is less than 0.2 and the Type of Glass is either “tableware” or “headlamps”. Finally, we print the tibble for confirmation.\n\n#Chain to obtain the desired tibble\nglass_data &lt;- glass_data |&gt; mutate(Type_of_Glass = factor(glass_data$Type_of_Glass,labels=c(\"building_windows_float_processed\", \"building_windows_non_float_processed\", \"vehicle_windows_float_processed\", \"containers\", \"tableware\", \"headlamps\"))) |&gt; filter(Fe &lt; 0.2, Type_of_Glass %in% c(\"tableware\", \"headlamps\"))\n\n#Print the tibble\nglass_data\n\n# A tibble: 38 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_Glass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;        \n 1   177  1.52  14    2.39  1.56  72.4  0     9.57  0        0 tableware    \n 2   178  1.52  13.8  2.41  1.19  72.8  0     9.77  0        0 tableware    \n 3   179  1.52  14.5  2.24  1.62  72.4  0     9.26  0        0 tableware    \n 4   180  1.52  14.1  2.19  1.66  72.7  0     9.32  0        0 tableware    \n 5   181  1.51  14.4  1.74  1.54  74.6  0     7.59  0        0 tableware    \n 6   182  1.52  15.0  0.78  1.74  72.5  0     9.95  0        0 tableware    \n 7   183  1.52  14.2  0     2.09  72.7  0    10.9   0        0 tableware    \n 8   184  1.52  14.6  0     0.56  73.5  0    11.2   0        0 tableware    \n 9   185  1.51  17.4  0     0.34  75.4  0     6.65  0        0 tableware    \n10   186  1.51  13.7  3.2   1.81  72.8  1.76  5.43  1.19     0 headlamps    \n# ℹ 28 more rows\n\n\n\n\nYeast Data\nWe read the data directly into R from the specified URL, using read_table since we have a space delimiter. Then, we print the tibble to inspect.\n\n#Read this data into R directly from the specified URL, use read_table since delim = ' '\nyeast_data &lt;- read_table(\"https://www4.stat.ncsu.edu/~online/datasets/yeast.data\",col_names=c(\"seq_name\",\"mcg\",\"gvh\",\"alm\",\"mit\",\"erl\",\"pox\",\"vac\",\"nuc\",\"class\"),guess_max=min(1000,Inf)) #Had some trouble with using n_max = Inf, then using n_max in guess_max, so just used Inf directly\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  seq_name = col_character(),\n  mcg = col_double(),\n  gvh = col_double(),\n  alm = col_double(),\n  mit = col_double(),\n  erl = col_double(),\n  pox = col_double(),\n  vac = col_double(),\n  nuc = col_double(),\n  class = col_character()\n)\n\n#Print the tibble\nyeast_data\n\n# A tibble: 1,484 × 10\n   seq_name     mcg   gvh   alm   mit   erl   pox   vac   nuc class\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n 2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n 3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n 4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n 5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n 6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n 7 ABC1_YEAST  0.5   0.54  0.48  0.65   0.5   0    0.53  0.22 MIT  \n 8 BAF1_YEAST  0.48  0.45  0.59  0.2    0.5   0    0.58  0.34 NUC  \n 9 ABF2_YEAST  0.55  0.5   0.66  0.36   0.5   0    0.49  0.22 MIT  \n10 ABP1_YEAST  0.4   0.39  0.6   0.15   0.5   0    0.58  0.3  CYT  \n# ℹ 1,474 more rows\n\n\nWe start a chain that removes the seq_name and nuc columns. Then, we continue the chain to add columns corresponding to the mean and median of each numeric variable (mcg, gvh, alm, mit, erl, pox, and vac) at each class grouping (see the across() function as we did in the dplyr video!). Finally, we print the tibble for confirmation.\n\n#Chain to obtain the desired tibble\nyeast_data &lt;- yeast_data |&gt; select(!c(\"seq_name\",\"nuc\")) |&gt; group_by(class) |&gt; mutate(across(where(is.numeric),mean,.names=\"mean_{ .col}\")) |&gt; mutate(across(where(is.numeric),median,.names=\"median_{ .col}\"))\n\n#Print the tibble\nyeast_data\n\n# A tibble: 1,484 × 29\n# Groups:   class [10]\n     mcg   gvh   alm   mit   erl   pox   vac class mean_mcg mean_gvh mean_alm\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT      0.521    0.533    0.517\n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT      0.521    0.533    0.517\n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT      0.521    0.533    0.517\n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC      0.452    0.456    0.529\n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT      0.521    0.533    0.517\n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT      0.481    0.470    0.535\n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT      0.521    0.533    0.517\n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC      0.452    0.456    0.529\n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT      0.521    0.533    0.517\n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT      0.481    0.470    0.535\n# ℹ 1,474 more rows\n# ℹ 18 more variables: mean_mit &lt;dbl&gt;, mean_erl &lt;dbl&gt;, mean_pox &lt;dbl&gt;,\n#   mean_vac &lt;dbl&gt;, median_mcg &lt;dbl&gt;, median_gvh &lt;dbl&gt;, median_alm &lt;dbl&gt;,\n#   median_mit &lt;dbl&gt;, median_erl &lt;dbl&gt;, median_pox &lt;dbl&gt;, median_vac &lt;dbl&gt;,\n#   median_mean_mcg &lt;dbl&gt;, median_mean_gvh &lt;dbl&gt;, median_mean_alm &lt;dbl&gt;,\n#   median_mean_mit &lt;dbl&gt;, median_mean_erl &lt;dbl&gt;, median_mean_pox &lt;dbl&gt;,\n#   median_mean_vac &lt;dbl&gt;"
  },
  {
    "objectID": "Homework4.html#task-2-combining-excel-and-delimited-data",
    "href": "Homework4.html#task-2-combining-excel-and-delimited-data",
    "title": "Homework4",
    "section": "Task 2: Combining Excel and Delimited Data",
    "text": "Task 2: Combining Excel and Delimited Data\n\nWhite Wine Data\nBecause the data is in an Excel file, we need to download the file to our directory (convenient to put it in with .qmd file) from the link: https://www4.stat.ncsu.edu/~online/datasets/white-wine.xlsx. Then, we identify the sheets in the file, import the data from the first sheet, and use the column names in the second sheet to rename the columns from the first sheet. Finally, we add a type column indicating that this is white wine and print the tibble to confirm updates.\n\n#Load the readxl library to use the Excel functions\nlibrary(readxl)\n\n#Identify the different sheets in the file\nsheets &lt;- excel_sheets(\"white-wine.xlsx\")\nsheets\n\n[1] \"white-wine\" \"variables\" \n\n#Import the data from the first sheet\nwhite_wine &lt;- read_excel(\"white-wine.xlsx\",sheet=sheets[1])\n\n#Print the tibble\nwhite_wine\n\n# A tibble: 4,898 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1               7               0.27          0.36             20.7     0.045\n 2              63               0.3           0.34              1.6     0.049\n 3              81               0.28          0.4               6.9     0.05 \n 4              72               0.23          0.32              8.5     0.058\n 5              72               0.23          0.32              8.5     0.058\n 6              81               0.28          0.4               6.9     0.05 \n 7              62               0.32          0.16              7       0.045\n 8               7               0.27          0.36             20.7     0.045\n 9              63               0.3           0.34              1.6     0.049\n10              81               0.22          0.43              1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n#Read in the data from the 2nd sheet to get a data frame with one column containing alternative versions of the variable names\nww_altvarnames &lt;- read_excel(\"white-wine.xlsx\",sheet=sheets[2])\nww_altvarnames$Variables\n\n [1] \"fixed_acidity\"        \"volatile_acidity\"     \"citric_acid\"         \n [4] \"residual_sugar\"       \"chlorides\"            \"free_sulfur_dioxide\" \n [7] \"total_sulfur_dioxide\" \"density\"              \"pH\"                  \n[10] \"sulphates\"            \"alcohol\"              \"quality\"             \n\n#Grab that column and overwrite the current white wine tibble column names (colnames())\nfor (i in 1:ncol(white_wine)){\n  colnames(white_wine)[i] = ww_altvarnames$Variables[i]\n}\n\n#Verify that the column names have been changed\ncolnames(white_wine)\n\n [1] \"fixed_acidity\"        \"volatile_acidity\"     \"citric_acid\"         \n [4] \"residual_sugar\"       \"chlorides\"            \"free_sulfur_dioxide\" \n [7] \"total_sulfur_dioxide\" \"density\"              \"pH\"                  \n[10] \"sulphates\"            \"alcohol\"              \"quality\"             \n\n#Add a type column to indicate that these are white wines\nwhite_wine &lt;- white_wine |&gt; mutate(type=\"white\")\n\n#Print the tibble\nwhite_wine\n\n# A tibble: 4,898 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   type &lt;chr&gt;\n\n\n\n\nRed Wine Data\nThis is a .csv file, but it has a semicolon delimiter, so we will use read_delim. We import the file, then use the variables from the second “white-wine.xlsx” sheet as column names for the red wine data set. Finally, we add a type column indicating that this is red wine and print the tibble to confirm the updates.\n\n#Read this in using the readr package. Be careful that the columns are read in as the correct type!\n\nred_wine &lt;- read_delim(\"https://www4.stat.ncsu.edu/~online/datasets/red-wine.csv\", delim=\";\", guess_max = min(1000,Inf))\n\nRows: 1599 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\ndbl (12): fixed acidity, volatile acidity, citric acid, residual sugar, chlo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n#Replace the variable names as done above\nfor (i in 1:ncol(red_wine)){\n  colnames(red_wine)[i] = ww_altvarnames$Variables[i]\n}\n\n#Append a column denoting the type as “red”\nred_wine &lt;- red_wine |&gt; mutate(type=\"red\")\n\n#Print the tibble\nred_wine\n\n# A tibble: 1,599 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1           7.4             0.7         0               1.9     0.076\n 2           7.8             0.88        0               2.6     0.098\n 3           7.8             0.76        0.04            2.3     0.092\n 4          11.2             0.28        0.56            1.9     0.075\n 5           7.4             0.7         0               1.9     0.076\n 6           7.4             0.66        0               1.8     0.075\n 7           7.9             0.6         0.06            1.6     0.069\n 8           7.3             0.65        0               1.2     0.065\n 9           7.8             0.58        0.02            2       0.073\n10           7.5             0.5         0.36            6.1     0.071\n# ℹ 1,589 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   type &lt;chr&gt;\n\n\n\n\nCombine Wine Data Sets\nWe concatenate the white wine and red wine data sets. Print the tibble to inspect.\n\n#Combine these two data sets into one data set\nwine &lt;- dplyr::bind_rows(white_wine,red_wine)\n\n#Print the tibble\nwine\n\n# A tibble: 6,497 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 6,487 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   type &lt;chr&gt;\n\n\nNext, we start a chain on our new combined data object to filter the data to look only at high-quality wines (quality &gt; 6.5) and wines that have a reasonable alcohol value (alcohol &lt; 132). Then, we continue our chain to sort the data from highest quality to lowest. Then, we select only the variables that contain acid, the alcohol variable, the type variable, and the quality variable. Finally, we add the mean and standard deviation of the alcohol variable to the data set for each setting of the quality variable and print the tibble to confirm.\n\n#Use chaining to obtain desired tibble\nwine &lt;- wine |&gt; filter(quality &gt; 6.5, alcohol &lt; 132) |&gt; arrange(desc(quality)) |&gt; select(contains(\"acid\"),alcohol,type,quality) |&gt; group_by(quality) |&gt; mutate(mean_alcohol=mean(alcohol),std_dev_alcohol=sd(alcohol))\n\n#Print the tibble\nwine\n\n# A tibble: 1,206 × 8\n# Groups:   quality [3]\n   fixed_acidity volatile_acidity citric_acid alcohol type  quality mean_alcohol\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;        &lt;dbl&gt;\n 1            91             0.27        0.45     104 white       9        122. \n 2            66             0.36        0.29     124 white       9        122. \n 3            74             0.24        0.36     125 white       9        122. \n 4            69             0.36        0.34     127 white       9        122. \n 5            71             0.26        0.49     129 white       9        122. \n 6            62             0.66        0.48     128 white       8         94.1\n 7            62             0.66        0.48     128 white       8         94.1\n 8            68             0.26        0.42     105 white       8         94.1\n 9            67             0.23        0.31     107 white       8         94.1\n10            67             0.23        0.31     107 white       8         94.1\n# ℹ 1,196 more rows\n# ℹ 1 more variable: std_dev_alcohol &lt;dbl&gt;\n\n\nNOTE: Throughout, when I have said, “Print the tibble,” I mean just the partial printing by writing the name of the tibble. Printing whole tibbles would be prohibitive due to the numbers of rows and columns in most of the raw data."
  }
]